// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.19.4
// source: api.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterCreateCollection = "/service.wireman.Greeter/CreateCollection"
const OperationGreeterGetCollection = "/service.wireman.Greeter/GetCollection"
const OperationGreeterListCollection = "/service.wireman.Greeter/ListCollection"
const OperationGreeterUserCollection = "/service.wireman.Greeter/UserCollection"

type GreeterHTTPServer interface {
	CreateCollection(context.Context, *Collection) (*CreateCollectionReply, error)
	GetCollection(context.Context, *GetCollectionRequest) (*Collection, error)
	ListCollection(context.Context, *ListCollectionRequest) (*ListCollectionReply, error)
	UserCollection(context.Context, *UserCollectionRequest) (*UserCollectionReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("/collection", _Greeter_CreateCollection0_HTTP_Handler(srv))
	r.GET("/collection", _Greeter_ListCollection0_HTTP_Handler(srv))
	r.GET("/collection/{id}", _Greeter_GetCollection0_HTTP_Handler(srv))
	r.GET("/user/{owner_address}/collection", _Greeter_UserCollection0_HTTP_Handler(srv))
}

func _Greeter_CreateCollection0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Collection
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCreateCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollection(ctx, req.(*Collection))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCollectionReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ListCollection0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterListCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCollection(ctx, req.(*ListCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCollectionReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetCollection0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollection(ctx, req.(*GetCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Collection)
		return ctx.Result(200, reply)
	}
}

func _Greeter_UserCollection0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserCollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterUserCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserCollection(ctx, req.(*UserCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserCollectionReply)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	CreateCollection(ctx context.Context, req *Collection, opts ...http.CallOption) (rsp *CreateCollectionReply, err error)
	GetCollection(ctx context.Context, req *GetCollectionRequest, opts ...http.CallOption) (rsp *Collection, err error)
	ListCollection(ctx context.Context, req *ListCollectionRequest, opts ...http.CallOption) (rsp *ListCollectionReply, err error)
	UserCollection(ctx context.Context, req *UserCollectionRequest, opts ...http.CallOption) (rsp *UserCollectionReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) CreateCollection(ctx context.Context, in *Collection, opts ...http.CallOption) (*CreateCollectionReply, error) {
	var out CreateCollectionReply
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterCreateCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...http.CallOption) (*Collection, error) {
	var out Collection
	pattern := "/collection/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ListCollection(ctx context.Context, in *ListCollectionRequest, opts ...http.CallOption) (*ListCollectionReply, error) {
	var out ListCollectionReply
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterListCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) UserCollection(ctx context.Context, in *UserCollectionRequest, opts ...http.CallOption) (*UserCollectionReply, error) {
	var out UserCollectionReply
	pattern := "/user/{owner_address}/collection"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterUserCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
